#!/usr/bin/env perl
#
# Ch 4
#
use Modern::Perl '2012';

use Game::Theory::TwoPersonMatrix;
use Math::Algebra::Symbols;

my ($p) = symbols(qw(p));

print "Ex 1:\n";
my $g = Game::Theory::TwoPersonMatrix->new(
    1 => { 1 => '(1 - p)', 2 => 'p' },
    2 => { 1 => 1, 2 => 0 },
    payoff => [ [1,-1], [-1,1] ]
);
print 's_expected_payoff: ', $g->s_expected_payoff(), "\n";
my $r1 = (1 - $p) * 1 * 1 + (1 - $p) * 0 * -1 + $p * 1 * -1 + $p * 0 * 1;
print 'simplify: ', $r1->simplify, "\n";
$g = Game::Theory::TwoPersonMatrix->new(
    1 => { 1 => '(1 - p)', 2 => 'p' },
    2 => { 1 => 0, 2 => 1 },
    payoff => [ [1,-1], [-1,1] ]
);
print 's_expected_payoff: ', $g->s_expected_payoff(), "\n";
my $r2 = (1 - $p) * 0 * 1 + (1 - $p) * 1 * -1 + $p * 0 * -1 + $p * 1 * 1;
print 'simplify: ', $r2->simplify, "\n";
my $s = $r1 eq $r2;
my $q = $s->solve($p);
print 'maximin strategy: ', $q, "\n";
$s = $r2->sub( p => $q );
print 'maximin expectation: ', $s, "\n";

print "Ex 2:\n";
$g = Game::Theory::TwoPersonMatrix->new(
    1 => { 1 => '(1 - p)', 2 => 'p' },
    2 => { 1 => 1, 2 => 0 },
    payoff => [ [0.8, 1], [0.9, 0.5] ]
);
print 's_expected_payoff: ', $g->s_expected_payoff(), "\n";
$r1 = (1 - $p) * 1 * 0.8 + (1 - $p) * 0 * 1 + $p * 1 * 0.9 + $p * 0 * 0.5;
print 'simplify: ', $r1->simplify, "\n";
$g = Game::Theory::TwoPersonMatrix->new(
    1 => { 1 => '(1 - p)', 2 => 'p' },
    2 => { 1 => 0, 2 => 1 },
    payoff => [ [0.8, 1], [0.9, 0.5] ]
);
print 's_expected_payoff: ', $g->s_expected_payoff(), "\n";
$r2 = (1 - $p) * 0 * 0.8 + (1 - $p) * 1 * 1 + $p * 0 * 0.9 + $p * 1 * 0.5;
print 'simplify: ', $r2->simplify, "\n";
$s = $r1 eq $r2;
$q = $s->solve($p);
print 'maximin strategy: ', $q, "\n";
$s = $r2->sub( p => $q );
print 'maximin expectation: ', $s, "\n";

print "Ex 4:\n";
$g = Game::Theory::TwoPersonMatrix->new(
    1 => { 1 => '(1 - p)', 2 => 'p' },
    2 => { 1 => 1, 2 => 0 },
    payoff => [ [0,-1], [2,3] ]
);
print 's_expected_payoff: ', $g->s_expected_payoff(), "\n";
$r1 = (1 - $p) * 1 * 0 + (1 - $p) * 0 * -1 + $p * 1 * 2 + $p * 0 * 3;
print 'simplify: ', $r1->simplify, "\n";
$g = Game::Theory::TwoPersonMatrix->new(
    1 => { 1 => '(1 - p)', 2 => 'p' },
    2 => { 1 => 0, 2 => 1 },
    payoff => [ [0,-1], [2,3] ]
);
print 's_expected_payoff: ', $g->s_expected_payoff(), "\n";
$r2 = (1 - $p) * 0 * 0 + (1 - $p) * 1 * -1 + $p * 0 * 2 + $p * 1 * 3;
print 'simplify: ', $r2->simplify, "\n";
$s = $r1 eq $r2;
$q = $s->solve($p);
print 'maximin strategy: ', $q, "\n";
$s = $r2->sub( p => $q );
print 'maximin expectation: ', $s, "\n";

print "Ex 6:\n";
$g = Game::Theory::TwoPersonMatrix->new(
    1 => { 1 => '(1 - p)', 2 => 'p' },
    2 => { 1 => 1, 2 => 0 },
    payoff => [ [0,1], [2,1] ]
);
print 's_expected_payoff: ', $g->s_expected_payoff(), "\n";
$r1 = (1 - $p) * 1 * 0 + (1 - $p) * 0 * 1 + $p * 1 * 2 + $p * 0 * 1;
print 'simplify: ', $r1->simplify, "\n";
$g = Game::Theory::TwoPersonMatrix->new(
    1 => { 1 => '(1 - p)', 2 => 'p' },
    2 => { 1 => 0, 2 => 1 },
    payoff => [ [0,1], [2,1] ]
);
print 's_expected_payoff: ', $g->s_expected_payoff(), "\n";
$r2 = (1 - $p) * 0 * 0 + (1 - $p) * 1 * 1 + $p * 0 * 2 + $p * 1 * 1;
print 'simplify: ', $r2->simplify, "\n";
$s = $r1 eq $r2;
$q = $s->solve($p);
print 'maximin strategy: ', $q, "\n";
$s = $r2->sub( p => $q );
print 'maximin expectation: ', $s, "\n";
